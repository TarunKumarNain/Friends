{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","robots.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","username","className","alt","src","id","CardList","robots","cardsArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","filteredRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.68c67a27.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\t const {name, email, username} = props;\r\n\treturn (\r\n         <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' >  \r\n\t         <img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n\t           <div> \r\n\t             <h2> Name - {name} </h2>\r\n\t             <p> email - {email} </p>\r\n\t             <h5> UserName - {username} </h5>\r\n\t         </div>\r\n\t      </div>\r\n\t\t)\r\n}\r\n\r\nexport default Card;","import React from 'react'; \r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => {\r\n  const { robots } = props;\r\n  const cardsArray = robots.map((user, i) => {\r\n  \treturn (\r\n  \t<Card \r\n  \tkey={i} \r\n  \tid={robots[i].id} \r\n  \tname={robots[i].name} \r\n  \temail={robots[i].email} \r\n  \tusername={robots[i].username}\r\n  \t />\r\n  \t );\r\n  })\r\n\treturn (\r\n    <div>\r\n    { cardsArray }\r\n    </div>\r\n   );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n      <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lighest-blue' \r\n      type='search'\r\n       placeholder='search robots'\r\n       onChange={searchChange}\r\n        />\r\n       </div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox; ","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Tarun ',\r\n    username: 'Tk',\r\n    email: 'Tarun@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Iliyaz',\r\n    username: 'Md',\r\n    email: 'Iliyaz@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Suprit',\r\n    username: 'Sd',\r\n    email: 'Suprit@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Haider',\r\n    username: 'Hd',\r\n    email: 'Haider.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Pushkar',\r\n    username: 'PS',\r\n    email: 'Pushkar@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Baby',\r\n    username: 'By',\r\n    email: 'Baby@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Hussain',\r\n    username: 'Hs',\r\n    email: 'Hussain@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Vivek',\r\n    username: 'Idk',\r\n    email: 'Vivek@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'School',\r\n    username: 'Fo',\r\n    email: 'School@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Sports',\r\n    username: 'St',\r\n    email: 'Sports@karina.biz'\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n       <div style={ {overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n        {props.children}\r\n       </div>\r\n\t);   \r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError : true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1> Ooooops That is not good </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { robots } from '../robots';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots : robots /*  [] */,\r\n\t\t\tsearchfield : ''\r\n\t\t}\r\n\t}\r\n \r\n/*  componentDidMount() {\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n     .then(response => response.json())\r\n     .then(users => this.setState({ robots: users}));\r\n}  */\r\n\r\n   onSearchChange = (event) => {\r\n   \tthis.setState({ searchfield: event.target.value})\r\n   } \r\n\r\n   render() {\r\n        const { robots, searchfield } = this.state;\r\n   \t\tconst filteredRobots = robots.filter(robot => {\r\n   \t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n   \t})\r\n        /* if (robots.length === 0){\r\n            return <h1> Loading </h1>\r\n         }\r\n         else { */\r\n   \t     return (\r\n              <div className='tc'>\r\n\t\t           <h1> Friends </h1>\r\n\t\t           <SearchBox searchChange={this.onSearchChange}/>\r\n                 <Scroll>\r\n                 <ErrorBoundary>\r\n                 <CardList robots={filteredRobots}/>\r\n                 </ErrorBoundary>\r\n                 </Scroll>\r\n         </div>\r\n   \t);\r\n     }\r\n}\r\n\r\n/* const App = () => {\r\n\treturn (\r\n\t\t<div className='tc'>\r\n\t\t<h1> RoboFriends </h1>\r\n\t\t<SearchBox />\r\n      <CardList robots={robots}/>\r\n      </div>\r\n\t)\r\n} */\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n//import App from './App';\r\n//import Card from './Card';\r\n//import CardList from './CardList';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//import registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\n\r\n\r\n\r\nReactDOM.render(\r\n // <React.StrictMode>\r\n  <App />\r\n  //</React.StrictMode>,\r\n , document.getElementById('root')\r\n);  \r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}